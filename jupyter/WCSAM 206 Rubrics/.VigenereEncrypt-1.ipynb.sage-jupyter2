{"backend_state":"init","kernel":"sage-9.1","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"094564","input":"key_numbers = alph.find(keyword)","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5186bd","input":"Answer here","pos":28,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5b9010","input":"keyword[0]","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5d50b4","input":"(1.3)\nplaintext_numbers = [alph.find(i) for i in plaintext]","pos":26,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"67b1c1","input":"","pos":40,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"721a52","input":"","pos":44,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"729289","input":"","pos":35,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7d6208","input":"(1.4)\n\nciphertext_number = Mod(plaintext_numbers[i] + key_numbers[i % key_length], 26)","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"803920","input":"ciphertext = ''","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"90fea5","input":"","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9d91dd","input":"","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a89b5f","input":"def VigenereDecrypt(ciphertext, keyword):\n    ","pos":42,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e30762","input":"Mod(key_number + plaintext_number, 26)","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fdc767","input":"key_length = len(keyword)","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"db2bf3","input":"alph = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"0aabe7","input":"def VigenereEncrypt(plaintext, keyword):\n    alph = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    ciphertext = ''\n    plaintext_numbers = [alph.find(i) for i in plaintext]\n    key_numbers = [alph.find(i) for i in keyword]\n    for i in range(len(plaintext_numbers)):\n        ciphertext_number = Mod(plaintext_numbers[i] + key_numbers[i % key_length], 26)\n        ciphertext_letter = alph[ciphertext_number]\n        ciphertext += ciphertext_letter\n    print ciphertext","pos":33,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"070991","input":"plaintext_number = alph.find(letter)","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"07c857","input":"len('SUPERCALIFRAGILISTICEXPIALIDOCIOUS')","output":{"0":{"data":{"text/plain":"34"},"exec_count":4,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"markdown","id":"0e5898","input":"Vigenère cycles between shifts in the following way. \n\n1. First off, the keyword is spelled out above the message, and repeated over and over again so that each letter in the message is associated with a letter from the keyword: \n<pre>\nPlaintext: d i v e r t t r o o p s t o e a s t r i d g e\nKeyword:   W H I T E W H I T E W H I T E W H I T E W H I\n</pre>\n2. To encrypt the first letter, we note that the plaintext 'd' lines up with the keyword 'W'. This means that we'll shift the 'd' forward by the amount encoded by 'W'.\n\nWhat does W correspond to in our letter-to-number chart, and what would be the result of shifting a 'd' forward by that number?","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"14d858","input":"Now, we want to tell Python to repeat the keyword numbers over and over again under the plaintext numbers. For example, if the keyword is \"NICE\" and the plaintext is \"FIREFIGHTER\", we'd do the following:\n\n1. Convert both to numbers like you did above:\n<pre>\nPlaintext:\n  \n  F  I  R  E  F  I  G  H  T  E  R\n  5  8  17 4  5  8  6  7  19 4  17\n\nKey:\n\n  N  I  C  E  N  I  C  E  N  I  C\n  13 8  2  4  13 8  2  4  13 8  2\n</pre>\n\n2. Repeat the key over and over again under the plaintext, then add corresponding key letters to corresponding plaintext letters:\n\n<pre>\nPlaintext:\n  \n  F  I  R  E  F  I  G  H  T  E  R\n  5  8  17 4  5  8  6  7  19 4  17\n\nKey:\n\n  N  I  C  E  N  I  C  E  N  I  C\n+ 13 8  2  4  13 8  2  4  13 8  2\n  ----------\n  18 16 19 8  18 16 8  11 ...\n  \n</pre>\n\nHow do we tell Python to do this? Well, note that we're adding the first letter of the keyword to the first, fifth, and ninth letters of the plaintext (F, F, T). The length of the keyword here is 4. What time do 1, 5, and 9 all represent on a 4-hour clock?","pos":27,"type":"cell"}
{"cell_type":"markdown","id":"187640","input":"Now, we want to do this for every plaintext letter and the corresponding keyword letter using a `for` loop. Here's a shortcut: the code\n\n<pre>\n(1.2)\nkey_numbers = [alph.find(i) for i in keyword]\n</pre>\n\nturns every letter in the keyword into a number and stores the entire result in the string `key_numbers`. So, for example, if the keyword was \"HI\", `key_numbers` would be `[7, 8]` because $H=7$ and $I=8$ in our letter-to-number chart.\n\nBelow, write the code to convert the entire plaintext to numbers and call the result `plaintext_numbers` (mimic the `key_numbers` code above but change the names).","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"2b4387","input":"","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"330dc1","input":"Continuing our steps for enciphering using Vigenere, the next step is to add the amount of the keyword shift to the plaintext, just as you did with the plaintext 'd' and 'i' in \"divert troops to east ridge\".\n\nYou've already written the code to convert both the plaintext to a number (`plaintext_number`) and the keyword to numbers (`key_number`). Below, write the code to add `key_number` to `plaintext_number` $\\mod{26}$ (but **don't run it**).","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"4294d4","input":"3. Encrypt a reasonably-long message using a key of length 2 below. Then share the ciphertext with a partner at your table and see if they can break it!","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"45c029","input":"The genius of Vigenère is that it uses a *keyword* to cycle between **multiple** shifts, so that a Vigenère cipher is actually multiple shift ciphers that we cycle through (like you cycled through two shifts in your reading question). Any idea how we could use a keyword to encode shifts? Write your answer below.","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"47a376","input":"4. Write a Vigenère **decryption** function by reversing the roles of ciphertext and plaintext in the chunk above where you defined the `VigenereEncrypt` function and changing only one other symbol in the code.","pos":41,"type":"cell"}
{"cell_type":"markdown","id":"48cc44","input":"","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"58f368","input":"OK, we're ready! Copy-paste lines (1.1), (1.2), and (1.3) of code in the chunk below. Below those, copy-paste the beginning of the `for` loop. Finally, tabbed over underneath the `for` command, copy-paste line (1.4) of code. Finally, still underneath the `for` loop, add code to convert `ciphertext_number` back to `ciphertext_letter` and append the result to the end of the string `ciphertext`. Then, outside the loop, have Python print the ciphertext.","pos":32,"type":"cell"}
{"cell_type":"markdown","id":"59b5b4","input":"# Vigenère Encryption\n\nAll of the ciphers we've seen up to this point have been **monoalphabetic substitution ciphers**, meaning they use only one *cipher alphabet* (way of assigning a given plaintext letter to a ciphertext letter). Today, we'll work with a **polyalphabetic substitution cipher** for the first time, where (for example) a plaintext $e$ could be enciphered either as a ciphertext $O$ or a ciphertext $A$.\n\nAs usual, we'll start by telling Python that we're working with capital English letters. Run the chunk below to do this:","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"6875db","input":"As before, our first step is to take a given plaintext letter and convert it to a number. Do you remember what code does this? Copy/paste the code from your `ShiftEncrypt` function that changes plaintext letters to plaintext numbers and labels the number `plaintext_number`. **Don't run the code yet.**","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"6e4b41","input":"OK, we're ready to encipher a single plaintext letter! We want to perform the following steps:\n\n1. Define `alph` to be the capital English alphabet.\n2. Assign the length of the variable `keyword` to the variable `key_length`.\n3. Start with an empty string of ciphertext.\n4. Convert the first letter of the string `plaintext` to a number and call the result `plaintext_number`.\n5. Convert the first letter of the string `keyword` to a number and call the result `key_number`.\n6. Add the `key_number` to the `plaintext_number`, mod $26$, and call the result `ciphertext_number`.\n7. Convert the `ciphertext_number` back to a `ciphertext_letter`.\n8. Add `ciphertext_number` to the string `ciphertext`.\n\nAlmost all these steps are things we've done before in previous modules (e.g., converting letters to numbers and vice versa). Below, write the code to label the empty string `''` with the name `ciphertext`.","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"6f5d7e","input":"So to figure out what key letter to add to a given plaintext letter, we just reduce the position of the plaintext letter modulo the key letter! For example, since 'I' is the sixth letter of 'FIREFIGHTER', we'd add the \n\n$$\n6\\mod{4} \\equiv 2\\text{nd}\n$$\n\nletter of the key to 'I'.\n\nBelow, I'll write the code to do this to the $i$th letter of `plaintext_numbers`, reduce mod 26, and label the result `ciphertext_number`. (Don't run it yet.)","pos":29,"type":"cell"}
{"cell_type":"markdown","id":"7a306a","input":"5. Test your Vigenère decryption function by using it to decrypt your ciphertext from Exercise 1.","pos":43,"type":"cell"}
{"cell_type":"markdown","id":"7beda5","input":"Just like we converted the plaintext to numbers, we need to convert the key to numbers as well. Below, write the code that would convert the variable `keyword` to numbers and label it `key_numbers`.","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"92bdc2","input":"","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"930c99","input":"2. What do you think would happen if you encrypted a Vigenère message using a key with only one letter (e.g. 'B')? Try encrypting the same message from Exercise 1 with the keyword 'B'. What happened? How secure is this cipher?","pos":36,"type":"cell"}
{"cell_type":"markdown","id":"a5fc99","input":"Similarly, since the plaintext 'i' aligns with the keyword 'H', we want to shift the 'i' forward by the amount encoded by the 'H'. What is that shift, and what is the result of shifting 'i' forward by this amount?","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"a8419f","input":"Now, we want to start with an empty string of ciphertext (`''`) and add the corresponding keyword number to every plaintext number. Since we're repeating the step of adding the key letter to the plaintext letter for every letter in the plaintext, we'll need to use a `for` loop!\n\nRemember how we used code like `alph[3]` to find the third letter in the alphabet? That code really treated `alph` as a string and searched for the third character (i.e., letter) in the string, then output that letter. \n\nHow do you think we would output the zeroth (remember Python lists start at zero) letter in the string `keyword`? Write that code below (don't run it):","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"b2336b","input":"","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"b98b6a","input":"Explain what happened here.","pos":38,"type":"cell"}
{"cell_type":"markdown","id":"c36914","input":"We want to do the process in chunk (1.4) to every letter of the plaintext. This requires us to use a for loop that begins\n\n``\nfor i in range(len(plaintext_numbers)):\n``\n\nLet's break this down. The string `plaintext_numbers` is a list of numbers. Its length is the same as the length of the plaintext, one plaintext number for every plaintext letter. \n\nThis `for` loop will start with the zeroth (remember all Python lists start at 0) plaintext number, then move on to the first, then the second, and so on until it reaches the length of the plaintext. This is exactly what we want to do in order to encrypt a message!","pos":31,"type":"cell"}
{"cell_type":"markdown","id":"c48b5f","input":"Finally, we'll assign the length of our `keyword` to the variable `key_length`. Write the code to output the length of the variable `keyword` and assign it to the name `key_length` using code below (don't run it):","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"dbb394","input":"Were the outputs of the `len` functions above what you expected? Why or why not?","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"dc12b1","input":"## Exercises\n\n1. Test your shiny new function by encrypting two or three lines of lyrics by one of your favorite artists using the keyword 'MUSIC'.","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"df1224","input":"Since the key is repeated over and over again under the plaintext, it's important that we know the length of the keyword. \n\nIn Python, the code to output the length of a string (such as a keyword) is `len(string)`. For example, to find the length of the word \"ALLIGATOR\", we'd type\n\n<pre>\nlen('ALLIGATOR')\n</pre>\n\nBelow, write the code to find the length of the word \"SUPERCALIFRAGILISTICEXPIALIDOCIOUS\". In the second code chunk below, write the code to find the length of the variable `alph`, which we've assigned to the English alphabet.","pos":12,"type":"cell"}
{"id":0,"time":1635278727738,"type":"user"}
{"last_load":1635278728729,"type":"file"}