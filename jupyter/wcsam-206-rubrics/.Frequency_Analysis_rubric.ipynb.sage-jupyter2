{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-a2a474b9-b812-4663-a797-de1db571431f.json","kernel":"sage-9.1","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"cb3a52","input":"","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"38a4b1","input":"# 1.2\n# counts occurences of each letter\nfor x in letter_list:\n    for i in range(0,26):\n        if x == alphabet[i]:\n            ## write your code below ##\n            count_list[i] += 1","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"517a40","input":"# 1.3\n# pair each letter of the alphabet with its frequency in a new list\n\n## Write your code here ##\nletter_freq = zip(alphabet,count_list)","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"a96ade","input":"# 1.4\n\n# sort by decreasing order of relative frequency and return the frequencies together with the corresponding ciphertext letters\n\nsorted_letter_freq = sorted(letter_freq, key = lambda count_list: count_list[1], reverse = True)\nprint sorted_letter_freq","output":{"0":{"name":"stdout","output_type":"stream","text":"[('T', 2), ('E', 1), ('S', 1), ('A', 0), ('B', 0), ('C', 0), ('D', 0), ('F', 0), ('G', 0), ('H', 0), ('I', 0), ('J', 0), ('K', 0), ('L', 0), ('M', 0), ('N', 0), ('O', 0), ('P', 0), ('Q', 0), ('R', 0), ('U', 0), ('V', 0), ('W', 0), ('X', 0), ('Y', 0), ('Z', 0)]\n"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"0bc076","input":"# 1.5\n## Copy-paste your code here ##\nalphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M',\n           'N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\nmessage = \"TEST\"\n\nletter_list = []\nfor i in message:\n    letter_list.append(i)\n\ncount_list = []\n\n## Edit the line of code below ##\nfor i in range(0,26):\n    count_list.append(0)\n\n# counts occurences of each letter\nfor x in letter_list:\n    for i in range(0,26):\n        if x == alphabet[i]:\n            ## write your code below ##\n            count_list[i] += 1\n\nletter_freq = zip(alphabet,count_list)\nsorted_letter_freq = sorted(letter_freq, key = lambda count_list: count_list[1], reverse = True)\nprint(sorted_letter_freq)","output":{"0":{"name":"stdout","output_type":"stream","text":"[('T', 2), ('E', 1), ('S', 1), ('A', 0), ('B', 0), ('C', 0), ('D', 0), ('F', 0), ('G', 0), ('H', 0), ('I', 0), ('J', 0), ('K', 0), ('L', 0), ('M', 0), ('N', 0), ('O', 0), ('P', 0), ('Q', 0), ('R', 0), ('U', 0), ('V', 0), ('W', 0), ('X', 0), ('Y', 0), ('Z', 0)]\n"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"3a7779","input":"freq_analysis('CABBAGE')","output":{"0":{"name":"stdout","output_type":"stream","text":"[('A', 2), ('B', 2), ('C', 1), ('E', 1), ('G', 1), ('D', 0), ('F', 0), ('H', 0), ('I', 0), ('J', 0), ('K', 0), ('L', 0), ('M', 0), ('N', 0), ('O', 0), ('P', 0), ('Q', 0), ('R', 0), ('S', 0), ('T', 0), ('U', 0), ('V', 0), ('W', 0), ('X', 0), ('Y', 0), ('Z', 0)]\n"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"ebff6c","input":"def freq_analysis(message):\n    ## copy-paste and edit your code here to define the function ##\n    alphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M',\n           'N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n    letter_list = []\n    for i in message:\n        letter_list.append(i)\n    count_list = []\n    for i in range(0,26):\n        count_list.append(0)\n\n    # counts occurences of each letter\n    for x in letter_list:\n        for i in range(0,26):\n            if x == alphabet[i]:\n                count_list[i] += 1\n    letter_freq = zip(alphabet,count_list)\n    sorted_letter_freq = sorted(letter_freq, key = lambda count_list: count_list[1], reverse=True)\n    print(sorted_letter_freq)","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"7cb923","input":"freq_analysis('FOUR SCORE AND SEVEN YEARS AGO OUR FATHERS BROUGHT FORTH ON THIS CONTINENT A NEW NATION FOUNDED ON THE PRINCIPLE THAT ALL MEN ARE CREATED EQUAL')","output":{"0":{"name":"stdout","output_type":"stream","text":"[('E', 15), ('N', 13), ('A', 11), ('O', 11), ('T', 11), ('R', 10), ('H', 6), ('I', 5), ('S', 5), ('U', 5), ('C', 4), ('D', 4), ('F', 4), ('L', 4), ('G', 2), ('P', 2), ('B', 1), ('M', 1), ('Q', 1), ('V', 1), ('W', 1), ('Y', 1), ('J', 0), ('K', 0), ('X', 0), ('Z', 0)]\n"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"0de465","input":"#Tests\n\n## write your code here ##\nfreq_analysis(\"WHEN IN THE COURSE OF HUMAN EVENTS IT BECOMES NECESSARY FOR ONE PEOPLE TO DISSOLVE THE POLITICAL BANDS WHICH HAVE CONNECTED THEM WITH ANOTHER AND TO ASSUME AMONG THE POWERS OF THE EARTH, THE SEPARATE AND EQUAL STATION TO WHICH THE LAWS OF NATURE AND OF NATURE'S GOD ENTITLE THEM, A DECENT RESPECT TO THE OPINIONS OF MANKIND REQUIRES THAT THEY SHOULD DECLARE THE CAUSES WHICH IMPEL THEM TO THE SEPARATION. WE HOLD THESE TRUTHS TO BE SELF-EVIDENT, THAT ALL MEN ARE CREATED EQUAL, THAT THEY ARE ENDOWED BY THEIR CREATOR WITH CERTAIN UNALIENABLE RIGHTS, THAT AMONG THESE ARE LIFE, LIBERTY AND THE PURSUIT OF HAPPINESS. — THAT TO SECURE THESE RIGHTS, GOVERNMENTS ARE INSTITUTED AMONG MEN, DERIVING THEIR JUST POWERS FROM THE CONSENT OF THE GOVERNED, — THAT WHENEVER ANY FORM OF GOVERNMENT BECOMES DESTRUCTIVE OF THESE ENDS, IT IS THE RIGHT OF THE PEOPLE TO ALTER OR TO ABOLISH IT, AND TO INSTITUTE NEW GOVERNMENT, LAYING ITS FOUNDATION ON SUCH PRINCIPLES AND ORGANIZING ITS POWERS IN SUCH FORM, AS TO THEM SHALL SEEM MOST LIKELY TO EFFECT THEIR SAFETY AND HAPPINESS. PRUDENCE, INDEED, WILL DICTATE THAT GOVERNMENTS LONG ESTABLISHED SHOULD NOT BE CHANGED FOR LIGHT AND TRANSIENT CAUSES; AND ACCORDINGLY ALL EXPERIENCE HATH SHEWN THAT MANKIND ARE MORE DISPOSED TO SUFFER, WHILE EVILS ARE SUFFERABLE THAN TO RIGHT THEMSELVES BY ABOLISHING THE FORMS TO WHICH THEY ARE ACCUSTOMED. BUT WHEN A LONG TRAIN OF ABUSES AND USURPATIONS, PURSUING INVARIABLY THE SAME OBJECT EVINCES A DESIGN TO REDUCE THEM UNDER ABSOLUTE DESPOTISM, IT IS THEIR RIGHT, IT IS THEIR DUTY, TO THROW OFF SUCH GOVERNMENT, AND TO PROVIDE NEW GUARDS FOR THEIR FUTURE SECURITY. — SUCH HAS BEEN THE PATIENT SUFFERANCE OF THESE COLONIES; AND SUCH IS NOW THE NECESSITY WHICH CONSTRAINS THEM TO ALTER THEIR FORMER SYSTEMS OF GOVERNMENT. THE HISTORY OF THE PRESENT KING OF GREAT BRITAIN IS A HISTORY OF REPEATED INJURIES AND USURPATIONS, ALL HAVING IN DIRECT OBJECT THE ESTABLISHMENT OF AN ABSOLUTE TYRANNY OVER THESE STATES. TO PROVE THIS, LET FACTS BE SUBMITTED TO A CANDID WORLD. HE HAS REFUSED HIS ASSENT TO LAWS, THE MOST WHOLESOME AND NECESSARY FOR THE PUBLIC GOOD. HE HAS FORBIDDEN HIS GOVERNORS TO PASS LAWS OF IMMEDIATE AND PRESSING IMPORTANCE, UNLESS SUSPENDED IN THEIR OPERATION TILL HIS ASSENT SHOULD BE OBTAINED; AND WHEN SO SUSPENDED, HE HAS UTTERLY NEGLECTED TO ATTEND TO THEM. HE HAS REFUSED TO PASS OTHER LAWS FOR THE ACCOMMODATION OF LARGE DISTRICTS OF PEOPLE, UNLESS THOSE PEOPLE WOULD RELINQUISH THE RIGHT OF REPRESENTATION IN THE LEGISLATURE, A RIGHT INESTIMABLE TO THEM AND FORMIDABLE TO TYRANTS ONLY. HE HAS CALLED TOGETHER LEGISLATIVE BODIES AT PLACES UNUSUAL, UNCOMFORTABLE, AND DISTANT FROM THE DEPOSITORY OF THEIR PUBLIC RECORDS, FOR THE SOLE PURPOSE OF FATIGUING THEM INTO COMPLIANCE WITH HIS MEASURES. HE HAS DISSOLVED REPRESENTATIVE HOUSES REPEATEDLY, FOR OPPOSING WITH MANLY FIRMNESS HIS INVASIONS ON THE RIGHTS OF THE PEOPLE.HE HAS REFUSED FOR A LONG TIME, AFTER SUCH DISSOLUTIONS, TO CAUSE OTHERS TO BE ELECTED, WHEREBY THE LEGISLATIVE POWERS, INCAPABLE OF ANNIHILATION, HAVE RETURNED TO THE PEOPLE AT LARGE FOR THEIR EXERCISE; THE STATE REMAINING IN THE MEAN TIME EXPOSED TO ALL THE DANGERS OF INVASION FROM WITHOUT, AND CONVULSIONS WITHIN.HE HAS ENDEAVOURED TO PREVENT THE POPULATION OF THESE STATES; FOR THAT PURPOSE OBSTRUCTING THE LAWS FOR NATURALIZATION OF FOREIGNERS; REFUSING TO PASS OTHERS TO ENCOURAGE THEIR MIGRATIONS HITHER, AND RAISING THE CONDITIONS OF NEW APPROPRIATIONS OF LANDS. HE HAS OBSTRUCTED THE ADMINISTRATION OF JUSTICE BY REFUSING HIS ASSENT TO LAWS FOR ESTABLISHING JUDICIARY POWERS. HE HAS MADE JUDGES DEPENDENT ON HIS WILL ALONE FOR THE TENURE OF THEIR OFFICES, AND THE AMOUNT AND PAYMENT OF THEIR SALARIES. HE HAS ERECTED A MULTITUDE OF NEW OFFICES, AND SENT HITHER SWARMS OF OFFICERS TO HARASS OUR PEOPLE AND EAT OUT THEIR SUBSTANCE. HE HAS KEPT AMONG US, IN TIMES OF PEACE, STANDING ARMIES WITHOUT THE CONSENT OF OUR LEGISLATURES. HE HAS AFFECTED TO RENDER THE MILITARY INDEPENDENT OF AND SUPERIOR TO THE CIVIL POWER. HE HAS COMBINED WITH OTHERS TO SUBJECT US TO A JURISDICTION FOREIGN TO OUR CONSTITUTION, AND UNACKNOWLEDGED BY OUR LAWS; GIVING HIS ASSENT TO THEIR ACTS OF PRETENDED LEGISLATION: FOR QUARTERING LARGE BODIES OF ARMED TROOPS AMONG US: FOR PROTECTING THEM, BY A MOCK TRIAL FROM PUNISHMENT FOR ANY MURDERS WHICH THEY SHOULD COMMIT ON THE INHABITANTS OF THESE STATES: FOR CUTTING OFF OUR TRADE WITH ALL PARTS OF THE WORLD:FOR IMPOSING TAXES ON US WITHOUT OUR CONSENT:FOR DEPRIVING US IN MANY CASES, OF THE BENEFIT OF TRIAL BY JURY:FOR TRANSPORTING US BEYOND SEAS TO BE TRIED FOR PRETENDED OFFENCES:FOR ABOLISHING THE FREE SYSTEM OF ENGLISH LAWS IN A NEIGHBOURING PROVINCE, ESTABLISHING THEREIN AN ARBITRARY GOVERNMENT, AND ENLARGING ITS BOUNDARIES SO AS TO RENDER IT AT ONCE AN EXAMPLE AND FIT INSTRUMENT FOR INTRODUCING THE SAME ABSOLUTE RULE INTO THESE COLONIESFOR TAKING AWAY OUR CHARTERS, ABOLISHING OUR MOST VALUABLE LAWS AND ALTERING FUNDAMENTALLY THE FORMS OF OUR GOVERNMENTS:FOR SUSPENDING OUR OWN LEGISLATURES, AND DECLARING THEMSELVES INVESTED WITH POWER TO LEGISLATE FOR US IN ALL CASES WHATSOEVER.HE HAS ABDICATED GOVERNMENT HERE, BY DECLARING US OUT OF HIS PROTECTION AND WAGING WAR AGAINST US.HE HAS PLUNDERED OUR SEAS, RAVAGED OUR COASTS, BURNT OUR TOWNS, AND DESTROYED THE LIVES OF OUR PEOPLE.HE IS AT THIS TIME TRANSPORTING LARGE ARMIES OF FOREIGN MERCENARIES TO COMPLEAT THE WORKS OF DEATH, DESOLATION, AND TYRANNY, ALREADY BEGUN WITH CIRCUMSTANCES OF CRUELTY & PERFIDY SCARCELY PARALLELED IN THE MOST BARBAROUS AGES, AND TOTALLY UNWORTHY THE HEAD OF A CIVILIZED NATION.HE HAS CONSTRAINED OUR FELLOW CITIZENS TAKEN CAPTIVE ON THE HIGH SEAS TO BEAR ARMS AGAINST THEIR COUNTRY, TO BECOME THE EXECUTIONERS OF THEIR FRIENDS AND BRETHREN, OR TO FALL THEMSELVES BY THEIR HANDS.E HAS EXCITED DOMESTIC INSURRECTIONS AMONGST US, AND HAS ENDEAVOURED TO BRING ON THE INHABITANTS OF OUR FRONTIERS, THE MERCILESS INDIAN SAVAGES WHOSE KNOWN RULE OF WARFARE, IS AN UNDISTINGUISHED DESTRUCTION OF ALL AGES, SEXES AND CONDITIONS.IN EVERY STAGE OF THESE OPPRESSIONS WE HAVE PETITIONED FOR REDRESS IN THE MOST HUMBLE TERMS: OUR REPEATED PETITIONS HAVE BEEN ANSWERED ONLY BY REPEATED INJURY. A PRINCE, WHOSE CHARACTER IS THUS MARKED BY EVERY ACT WHICH MAY DEFINE A TYRANT, IS UNFIT TO BE THE RULER OF A FREE PEOPLE.NOR HAVE WE BEEN WANTING IN ATTENTIONS TO OUR BRITISH BRETHREN. WE HAVE WARNED THEM FROM TIME TO TIME OF ATTEMPTS BY THEIR LEGISLATURE TO EXTEND AN UNWARRANTABLE JURISDICTION OVER US. WE HAVE REMINDED THEM OF THE CIRCUMSTANCES OF OUR EMIGRATION AND SETTLEMENT HERE. WE HAVE APPEALED TO THEIR NATIVE JUSTICE AND MAGNANIMITY, AND WE HAVE CONJURED THEM BY THE TIES OF OUR COMMON KINDRED TO DISAVOW THESE USURPATIONS, WHICH WOULD INEVITABLY INTERRUPT OUR CONNECTIONS AND CORRESPONDENCE. THEY TOO HAVE BEEN DEAF TO THE VOICE OF JUSTICE AND OF CONSANGUINITY. WE MUST, THEREFORE, ACQUIESCE IN THE NECESSITY, WHICH DENOUNCES OUR SEPARATION, AND HOLD THEM, AS WE HOLD THE REST OF MANKIND, ENEMIES IN WAR, IN PEACE FRIENDS.WE, THEREFORE, THE REPRESENTATIVES OF THE UNITED STATES OF AMERICA, IN GENERAL CONGRESS, ASSEMBLED, APPEALING TO THE SUPREME JUDGE OF THE WORLD FOR THE RECTITUDE OF OUR INTENTIONS, DO, IN THE NAME, AND BY AUTHORITY OF THE GOOD PEOPLE OF THESE COLONIES, SOLEMNLY PUBLISH AND DECLARE, THAT THESE UNITED COLONIES ARE, AND OF RIGHT OUGHT TO BE FREE AND INDEPENDENT STATES, THAT THEY ARE ABSOLVED FROM ALL ALLEGIANCE TO THE BRITISH CROWN, AND THAT ALL POLITICAL CONNECTION BETWEEN THEM AND THE STATE OF GREAT BRITAIN, IS AND OUGHT TO BE TOTALLY DISSOLVED; AND THAT AS FREE AND INDEPENDENT STATES, THEY HAVE FULL POWER TO LEVY WAR, CONCLUDE PEACE, CONTRACT ALLIANCES, ESTABLISH COMMERCE, AND TO DO ALL OTHER ACTS AND THINGS WHICH INDEPENDENT STATES MAY OF RIGHT DO. — AND FOR THE SUPPORT OF THIS DECLARATION, WITH A FIRM RELIANCE ON THE PROTECTION OF DIVINE PROVIDENCE, WE MUTUALLY PLEDGE TO EACH OTHER OUR LIVES, OUR FORTUNES, AND OUR SACRED HONOR.\")","output":{"0":{"name":"stdout","output_type":"stream","text":"[('E', 859), ('T', 639), ('O', 513), ('N', 483), ('A', 477), ('S', 477), ('I', 449), ('R', 424), ('H', 348), ('D', 252), ('L', 228), ('U', 209), ('C', 184), ('F', 180), ('M', 144), ('P', 138), ('G', 130), ('W', 97), ('B', 95), ('Y', 81), ('V', 74), ('J', 16), ('K', 14), ('X', 9), ('Q', 6), ('Z', 4)]\n"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"11f546","input":"# 1.1\nalphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M',\n           'N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\nmessage = \"TEST\"\n\ncount_list = []\n\n## Edit the line of code below ##\nfor i in range(0,26):\n    count_list.append(0)","pos":2,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"c80e67","input":"# start with a blank list\ncool_list = []\nfor i in message:\n    cool_list.append(i)","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"416d0c","input":"## Write your code here ##\nletter_list = []\nfor letter in message:\n    letter_list.append(letter)","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"085044","input":"For technical reasons, we need to convert our message string to a list of letters (so we can count letters without worrying about e.g. spaces).\nWe do this by going through our message letter by letter and adding each letter to our list.\nThis is done using the command `.append`. \n\nWhenever you have a list in Python, you can add numbers or strings to the end of the list by writing `listname.append(object)`, replacing `listname` with the name of your list and `object` with the string or number you'd like to add to your list.\n\nIf our list were called `cool_list`, the code to do this would be as follows:","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"1dee1e","input":"Now, let's bring it all together. **Below, copy-paste all your code from (1.1)-(1.4) above in order and run it in order to perform a frequency count on the message `'TEST'`.**","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"3da5f9","input":"## Python Module: Frequency Analysis\n\nFrequency analysis is the process of counting the number of occurrences of ciphertext letters in order to make a guess about what plaintext letters they came from. Frequency analysis only works for *monoalphabetic substitution ciphers*, in which letters are always enciphered the same way (for example, every 'e' in the plaintext is enciphered as a 'T'). Frequency analysis breaks down (though it can be modified to work) in the case of *polyalphabetic substitution ciphers*, in which different occurences of a plaintext letter could be enciphered differently. (For example, one 'e' may be enciphered as a 'T' and another as an 'R'.)\n\nFor example: For the text \"TEST\" the frequency of 'E' is 1, 'S' is 1 and 'T' is 2. The input to the function will be an encrypted body of text that only contains the capital letters A-Z. As output, we will print a list of the frequency for each of the letters A-Z.\n\nTo begin, let's look at the code for a frequency count of the text \"TEST\".\n\nWe'll start with an empty `count_list`, then initialize the count at zero for each of the $26$ capital English letters. The following code chunk will (once you fix it) initialize the count of each letter as $0$. In other words, the code chunk will add $26$ zeroes to our list of letter counts. \n\nIt's much easier to use a `for` loop here rather than adding 26 zeroes to our list by hand. In other words, we want to tell our computer to \"append\" 0 to our `count_list` 26 times.\n\nDo you remember how to specify the range of numbers between 0 and 25, including 0 and 25? **Edit the chunk of code below to add the correct numerical range in between the parentheses after `range` in the line `for i in range():`**","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"5aacfe","input":"Below, write the code to begin with a blank list called `letter_list` (the underscore is essential because Python can't read spaces in variable names) and append all the letters in our message to `letter_list`. (Hint: copy the code chunk above and just change the name of the list.)","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"5d0f33","input":"Lastly, it'd be useful to sort our list from most frequent to least frequent in order to use it to break codes.\n\nThe way Python sorts lists is with the command \n\n```\n{name of new sorted list} = sorted({list to sort}, key = lambda {name of column to sort by}: {name of column to sort by}[number of column to sort by])\n```\n\nHere, I use curly brackets `{}` to denote where you fill in the blanks. There should be no curly brackets in your code.\n\nIn this case, we want to sort the list `letter_freq` according to the values in the column `count_list` (which is the first column in the list, since `alphabet` is considered the zeroth column).\n\nBelow, write the code to perform this sort, name the new sorted list `sorted_letter_freq`, then print the list `sorted_letter_freq`.","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"7acd70","input":"Now, we need to go through `count_list` and add each occurrence of each letter. For example, in the word 'TEST', we want to start at the first T in the message and add $1$ to the entry of `count_list` corresponding to the letter T. Since $T = 19$, we want to add 1 to the 19th entry of `count_list` every time we see a T.\n\nThe code to add 1 to the 19th entry of `count_list` is:\n\n```\ncount_list[19] += 1\n```\n\nHere, \"+=\" denotes that we're replacing the 19th entry of `count_list` with the 19th entry of `count_list` plus 1.\n\n**In place of the line \"`## write your code here ##`\", copy and paste the code to replace the $i$th entry of `count_list` with the $i$th entry plus 1.**","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"85d248","input":"**Once you think you have a working function, test it below by performing frequency analysis on three messages of your choice.** \n\nFor example, the code to do a frequency analysis on the message \"CABBAGE\" would be `freq_analysis(\"CABBAGE\")`.","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"952b8a","input":"Finally, we don't just want code to perform frequency analysis on one message; we want to be able to input any message and have our code perform frequency analysis on that message.\n\nAs usual, we'll define a *function* that takes as input a `message` and outputs the list of letter frequencies in the message, sorted from greatest to least.\n\n**Copy-paste your code from (1.5) above, changing your code as necessary, in order to define such a function `freq_analysis` below. Remember to add a line that `print`s `sorted_letter_freq`, the list of sorted letter frequencies, at the end of your function.**","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"c01afa","input":"# Rubric\n\n**Give full credit if students have a function that outputs the letter frequencies either from greatest to least or least to greatest. A recent update to Python changed the code so that the code I outlined should only order from least to greatest.**\n\n- If students don't have a working frequency analysis function, give 20 points for each of the following labeled chunks that has the correct code:\n    - (1.1)\n    - (1.2)\n    - (1.3)\n    - (1.4)\n    - (1.5)","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"e1ea9c","input":"The code above (once we add a `print(count_list)` command to the end; don't worry about that yet) spits out a list of 26 numbers, where each number is equal to the number of occurrences of the corresponding letter. For example, if we run the above code on the message `'TEST'`, we'd get the list\n\n```\n[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0]\n```\n\nwhere the 1s in the 4th and 17th spots in the list (remember, Python starts counting at 0) reflect the counts of the letters $E = 4$ and $S = 17$, and the 2 in the 18th spot reflects the count of $T = 18$.\n\nDo you see any problems? \n\nIt's annoying to have to count how far out in the list we are in order to determine what letter's frequency we're looking at. It would be ideal if each spot in the list was \"labeled\" with the corresponding letter.\n\nThe way we'll do this is by *merging* our `alphabet` list with `count_list`. This takes the first entries in each list, in this case `'A'` and `0`, and merges them together into the entry `['A',0]`.\n\nSimilarly, we'll get the entries \n\n```\n['B',0], ['C',0], ['D',0], ['E',1],\n```\n\netc.\n\nThe Python command to merge two lists together is `zip(list1, list2)`. **Below, write the command to merge the lists `alphabet` and `count_list` together, then name your \"zipped\" list `letter_freq`**.","pos":9,"type":"cell"}
{"id":0,"time":1637269226115,"type":"user"}
{"last_load":1637269225669,"type":"file"}