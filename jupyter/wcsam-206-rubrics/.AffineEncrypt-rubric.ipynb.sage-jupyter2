{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-47376500-153e-4f29-a243-dc7d5bc74fc6.json","kernel":"sage-9.1","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"6d7cbd","input":"Mod(m*P + k, 26)","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"184ba3","input":"Mod(3*13 + 7, 26)","output":{"0":{"data":{"text/plain":"20"},"exec_count":1,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"437d2a","input":"# Copy-paste your ShiftEncrypt function below and then make the designated changes.\ndef AffineEncrypt(plaintext, m, k):\n    alph = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    ciphertext = ''\n    for letter in plaintext:\n        plaintext_number = alph.find(letter)\n        ciphertext_number = Mod(m*plaintext_number + k, 26)\n        ciphertext_letter = alph[ciphertext_number]\n        ciphertext += ciphertext_letter\n    print(ciphertext)","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"c96dfc","input":"def AffineEncryptX(plaintext, m, k):\n    ### Write your code here ###\n    alph = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ!?'\n    ciphertext = ''\n    for letter in plaintext:\n        plaintext_number = alph.find(letter)\n        ciphertext_number = Mod(m*plaintext_number + k, 28)\n        ciphertext_letter = alph[ciphertext_number]\n        ciphertext += ciphertext_letter\n    print(ciphertext)\nAffineEncryptX('YAYEUCLID!',15,2)","output":{"0":{"name":"stdout","output_type":"stream","text":"!C!GWE?KTA\n"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"ae4859","input":"### Write your code for (1)-(4) here ###\nAffineEncrypt('GOGRIFFINS',5,7)\nAffineEncrypt('CRYPTOGRAPHYISAWESOME',17,4)\nAffineEncrypt('STOPHAMMERTIME', 45, 32)\nAffineEncrypt('NANANANANANANANANABATMAN', 13, 0)","output":{"0":{"name":"stdout","output_type":"stream","text":"LZLOVGGVUT\nMHWZPICHEZTWKYEOUYIAU\nKDMFJGAAERDCAE\nNANANANANANANANANANANAAN\n"}},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"10cd6f","input":"Below, under the line `def AffineEncrypt(plaintext, m, k)`, copy-paste the code under the line `def ShiftEncrypt(plaintext, key)` from the `ShiftEncrypt` module (toward the very end, where you're defining the `ShiftEncrypt` function for the first time).  Finally, change your code so instead of just adding $k$, we're multiplying by $m$ first and then adding $k$. Then run the chunk below (nothing should happen yet).","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"18f9d8","input":"# Python Module: Affine Cipher Encryption","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"2e0b9c","input":"Look at the way Sage enciphered \"STOPHAMMERTIME\" with multiplicative key 45 and additive key 32. Using modular arithmetic, rewrite the equation $C\\equiv 45P+32\\mod{26}$ to an equivalent equation in which each number is reduced mod 26. Write that equation below; you may use = instead of $\\equiv$ for congruence. Test your equation by encrypting the letter \"S\" with it on a separate sheet of paper. Does the resulting ciphertext match that of the function?","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"57d0a0","input":"## Now it's your turn!","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"6d6c8d","input":"What happens to the word \"Batman\" in (4)? Why?","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"6f094c","input":"Every letter is converted to either N or A, where even letters are sent to 26 = A and odd letters are sent to 13 = N.","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"8b9997","input":"Since 45 = 19 mod 26 and 32 = 6 mod 26, this cipher is equivalent to\n\nC = 19P + 6 mod 26","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"9ded4e","input":"Now, the plaintext letter that we're encrypting is not always going to be M, and our keys are not always going to be $m=3$ and $k=7$. Below, write the code to multiply the variable $m$ times the variable $P$, then add $k$. Finally, wrap this code in the parentheses after the word Mod(). **Don't run the code chunk below.**","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"a3e2fe","input":"# Rubric\n\n- **50 Points**: student has a working `AffineEncrypt` function\n- **10 Points**: student successfully reduces $45$ and $32\\mod{26}$\n- **10 Points**: student explains that the cipher $C\\equiv 13P\\mod{26}$ sends every number to either $26 = A$ or $13 = N$.\n- **30 Points**: student has a working `AffineEncryptX` function","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"cb9dd6","input":"Use your affine encryption function to encrypt the following messages with their corresponding keys:\n\n1. \"GOGRIFFINS\", $m = 5$, $k = 7$\n2. \"CRYPTOGRAPHYISAWESOME\", $m = 17$, $k = 4$\n3. \"STOPHAMMERTIME\", $m = 45$, $k = 32$.\n4. \"NANANANANANANANANABATMAN\", $m = 13$, $k = 0$. ","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"dbbd52","input":"The affine cipher is more complicated than the shift cipher. This is good for encryption security, but makes the cipher even more cumbersome to implement by hand. In this Python module, you'll write a function that takes as inputs a plaintext message $P$, multiplicative key $m$, and additive key $k$, and outputs the ciphertext $C$ via the equation $C\\equiv mP+k\\mod{26}$. Then, you'll encrypt several messages with this function. Finally, you'll develop a new function that allows you to use a larger alphabet to affine-encipher messages, for example by adding characters such as !, ?, and *.\n\nLet's begin by outlining the code necessary to encrypt a message using the affine cipher. Luckily, it only takes a small modification of your `ShiftEncrypt` code to encrypt using an affine cipher. Instead of adding $k$, our shift, and then reducing $\\mod 26$, we're first multiplying by $m$, adding $k$, and reducing the result $\\mod 26$.\n\nThe code to multiply 3 by 7 in Python is `3*7`. The code for the linear function $y=3x+7$ in Python is `y=3*x+7`.\n\nIf the plaintext letter in our code was 'n', which is 13 on our letter-to-number chart, write the code to encrypt 'n' using the affine cipher $C\\equiv 3P+7\\mod{26}$ in the chunk below. Test that, when you run the code, you get the number $20$, corresponding to the ciphertext letter U.","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"f9a76f","input":"Finally, define a function that uses a larger alphabet of your choice. For example, you could add the special characters ~!? to your alphabet. Be sure to adjust the modulus accordingly! Then, use this function to encrypt a message of your choice.","pos":15,"type":"cell"}
{"id":0,"time":1633492908614,"type":"user"}
{"last_load":1633492908586,"type":"file"}