{"backend_state":"init","kernel":"sage-9.4","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.15"}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"24b9b9","input":"# 1.3\nwhile a != 0:\n    b = b % a\n    a,b = b,a\nprint b","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4ca71d","input":"# 1.2\nwhile a != 0:\n    b = b % a\n    a,b = b,a","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7a3019","input":"# 1.1\nwhile a != 0:\n    b = b % a","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"7f4b66","input":"b = b % a","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"ee18d2","input":"#3. \nEA(12341234, 543513543)","output":{"0":{"name":"stdout","output_type":"stream","text":"73\n"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"c2501c","input":"# 2.\n548%32","output":{"0":{"data":{"text/plain":"4"},"exec_count":3,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"59a688","input":"# 3.\n91042%8321","output":{"0":{"data":{"text/plain":"7832"},"exec_count":4,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"45faf8","input":"# 1.\n263%123","output":{"0":{"data":{"text/plain":"17"},"exec_count":5,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"d17ff0","input":"x = 1\nwhile x < 4:\n    print x\n    x = x + 1","output":{"0":{"name":"stdout","output_type":"stream","text":"1\n2\n3\n"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"084a3a","input":"# 1.4 Defining a function\ndef EA(a,b):\n    while a != 0:\n        b = b % a\n        a,b = b,a\n    print b","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"f7b8dd","input":"#1.\nEA(213, 543)","output":{"0":{"name":"stdout","output_type":"stream","text":"3\n"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"e3c102","input":"#2.\nEA(32132, 54254)","output":{"0":{"name":"stdout","output_type":"stream","text":"2\n"}},"pos":25,"type":"cell"}
{"cell_type":"markdown","id":"02ed3c","input":"**The `Mod` or % functions reduce $b\\mod{a}$, which is the same thing as taking the remainder of $b/a$.**","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"105458","input":"In Python, the code for \"reduce a modulo b\" is `Mod(a,b)` or, equivalently, `a % b`. For example, to reduce $43 \\mod 26$, you'd write `Mod(43,26)` or `43 % 26`. (Here, when you see the \"percent\" symbol, think of division and finding a remainder.)\n\nBelow, write and run the code to reduce each of the following:\n1. $263 \\mod 123$\n2. $548 \\mod 32$\n3. $91042 \\mod 8321$","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"17e3fe","input":"The goal of this Python module is to give you a greater understanding of the Euclidean Algorithm by designing a function to compute the greatest common divisor $\\gcd(a,b)$ of two whole numbers $a$ and $b$.\n\nRecall the steps in the Euclidean Algorithm when computing $\\gcd(a,b)$, assuming $a < b$:\n\n1. Divide the larger of $a$ and $b$ by the smaller. Since we're assuming $a < b$, we'd divide $b$ by $a$.\n2. Keep the remainder and $a$. Since the remainder of $b/a$ is smaller than $a$, let's rename $a$ to $b$, and call the remainder our new $a$.\nFor example, after dividing $b=13$ by $a=5$, we get a remainder of $3$. We'd then rename $a=3$, $b=5$.\n3. Repeat this process until one of your numbers becomes $0$. Since at each stage we rename $a$ to be the smaller of the two numbers, we'd repeat until $a=0$.\n4. At this point, the gcd is the other (nonzero) number, $b$.\n\nWe need to figure out how to ask Python to take the remainder of $b/a$. What mathematical process do we already know how to do in Python that would give us the remainder? Write your answer below.","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"2368bf","input":"Step 2 is to repeat Step 1 \"until one of our numbers is 0\". The way we do this in Python is with a *`while` loop*. A `while` loop says \"run the code below as long as some statement is true\". Contrast with a `for` loop, which runs e.g. for every number in a given range. In a `while` loop, the loop will stop once the specified condition is *no longer* met.\n\nJust like a `for` loop, when beginning a `while` loop, you enter a colon. Everything that should be repeated is tabbed over. Once the loop ends, anything you want Python to do afterwards is not tabbed over.\n\nHere's a simple example of a while loop:\n\n```\nx = 1\nwhile x < 4:\n    print x\n    x = x + 1\n```\n\nThis code says \"start with $x=1$. Then, as long as $x$ is less than $4$, print out $x$, then replace $x$ with $x+1$. Stop doing this as soon as $x\\geq 4$.\" What do you think this code will do? Write your guess below. Then run the code in the next box to see what it does. Did you guess right?","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"4f2b9a","input":"Think through how the Euclidean Algorithm would work for $a=2,b=3$. First it would reduce $b\\mod{a}$, getting a new $b$-value of $1$. At this point, $a=2$ and $b=1$. What happens at this stage if we try to reduce $b\\mod{a}$? Explain your answer.","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"6124ee","input":"**The code should spit out [1, 2, 3] and then stop, since when $x=3$ the `while loop` would print $3$, replace $3$ with $4$, and at that point the condition $x<4$ would no longer be met.**","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"679c2e","input":"In our case, we want to run code as long as $a \\neq 0$, since this means the code will stop when $a=0$. In Python, \"not equal to\" is written `!=`. (The exclamation mark is \"crossing out\" the equals sign.) So, for example, to say \"$x$ is not equal to $5$\", you'd write `x != 5`.\n\nBelow, write the first line of a while loop that will run as long as $a \\neq 0$. Remember to put a colon after the first line, and don't run your code yet! Underneath your first line, tabbed over, write the code to replace $b$ with $b \\mod a$. This code corresponds to steps 1 and 2 of our algorithm.","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"91e3da","input":"# The Euclidean Algorithm with Python","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"98a501","input":"We're almost done! After completing steps 1 and 2, the last step is to have the code spit out the nonzero number. Since our loop runs *until* $a = 0$, at the end of our loop, $a = 0$. So $b$ is the nonzero number we want.\n\nRemember that the Pythonic expression for \"spit `something` out\" is `print something` (here you'd replace the variable `something` with whatever variable you want to return). Below, copy-paste your code from (1.2), but this time, add code below your while loop to spit out the number $b$, which will be our gcd. **Don't run your code yet**; we'll do that once we define a function below.","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"a56c92","input":"# Rubric\n\n- **60 points**: student has a working Euclidean Algorithm function\n- **40 points**: student successfully runs the function to compute each of:\n    - $\\gcd(213,543)$\n    - $\\gcd(32132,54254)$\n    - $\\gcd(12341324,543513543)$","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"bea613","input":"For the reason you mentioned above, if we continued replacing $b$ with $b\\mod{a}$ at each step, never changing the roles of $a$ or $b$, the code would never stop running. This is because reducing a smaller number modulo a bigger number *doesn't change the smaller number*. On a clock with $2$ hours, 1:00 is just 1:00!\n\nThe way we'll fix this is by telling Python to interchange the roles of $a$ and $b$ after each reduction step. The code to do this is `a,b=b,a`. This tells Python to take the value to the left of the first comma ($a$) and replace it with the value to the left of the second comma ($b$). Simultaneously, this code tells Python to replace the value to the *right* of the first comma ($b$) with the value to the *right* of the second comma ($a$). Overall, thus, the code interchanges the roles of $a$ and $b$.\n\nBelow, copy-paste your code from (1.1), but then add the code to interchange the values of $a$ and $b$ tabbed over **below the `while` loop**.","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"c65988","input":"And for your last question on this assignment, test your brand-new gcd function on a few pairs of numbers! In the code chunk below, tell your function to compute the following:\n1. $\\gcd(213,543)$\n2. $\\gcd(32132,54254)$\n3. $\\gcd(12341324,543513543)$\n\nRemember that, in order to use a function you've written, you have to write the name of the function, open parentheses, inputs to the function separated by commas, and close parentheses. For example, to run a function called `zookeeper` on the inputs `monkey, lion, tiger`, you'd write\n\n```\nzookeeper(monkey, lion, tiger)\n```","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"d71f89","input":"**We'd get $1\\mod{2}=1$. Nothing would change.**","pos":16,"type":"cell"}
{"cell_type":"markdown","id":"ee5b80","input":"OK, last step! Let's make a *function* out of your code so we don't need to write all of the code out every time we want to compute a gcd. Do you remember how functions work? The first line looks like `def name_of_function(input1, input2):`. Everything under the first line that's part of the function gets tabbed over.\n\nIn the code block below, define a function called `EA` which takes as inputs two whole numbers $a$ and $b$ where $a\\lt b$ and spits out $\\gcd(a,b)$. (Hint: after writing the line which `def`s your function, just copy/paste your code from earlier below that line. Make sure you tab everything under the `def` line over once, and you'll need another tab underneath the `while` line!)\n\nActually, Sage (the app we're using to code in Python) already has a built-in `gcd` function. **So it's important we don't call our function `gcd`.**","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"fdaba4","input":"Now, let's write code for each step in the Euclidean Algorithm. For now, let's assume that $a\\neq 0$ and that $a\\lt b$.\n\nIn the first step of the Euclidean Algorithm, we replace $b$ with $b\\mod a$. In Python, \"replace $x$ with $y$\" is written `x = y`.\n\nBelow, write the code to replace $b$ with $b \\mod a$.","pos":8,"type":"cell"}
{"id":0,"time":1633668002625,"type":"user"}
{"last_load":1633667173838,"type":"file"}