{"backend_state":"running","kernel":"sage-8.8","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":244744192},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"}},"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"063e4d","input":"","pos":10,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1b9dfb","input":"b = b % a","pos":3,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"723dd9","input":"","pos":16,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c2cbf6","input":"","pos":12,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e1feb1","input":"","pos":21,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e7fd51","input":"263 % 123\n548 % 32\n91042 % 8321","pos":1,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f782e4","input":"","pos":14,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"ab310e","input":"x = 0\nwhile x < 4:\n    print x\n    x = x + 1","output":{"0":{"name":"stdout","output_type":"stream","text":"0\n1\n2\n3\n"}},"pos":6,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"b5c726","input":"while b != 0:\n    b = b % a","output":{"0":{"ename":"NameError","evalue":"name 'b' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-c9b3801853ad>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mwhile\u001b[0m \u001b[0mb\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mInteger\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'b' is not defined"]}},"pos":8,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"bbe6ad","input":"gcd(213, 543)","output":{"0":{"data":{"text/plain":"3"},"exec_count":6,"output_type":"execute_result"}},"pos":18,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"ed78f4","input":"gcd(32132, 54254)","output":{"0":{"data":{"text/plain":"2"},"exec_count":7,"output_type":"execute_result"}},"pos":19,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"86db79","input":"def gcd(a,b):\n    while a != 0:\n        b = b % a\n        a,b = b,a\n    return b","pos":15,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":9,"id":"d5af9a","input":"gcd(12341324, 543513543)","output":{"0":{"data":{"text/plain":"1"},"exec_count":9,"output_type":"execute_result"}},"pos":20,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"038eaa","input":"Step 2 is to repeat Step 1 \"until one of our numbers is 0\". The way we do this in Python is with a *while loop*. A while loop specifies a condition under which the code will stop. Until that condition is met, the code will repeat itself.\n\nJust like a for loop, when beginning a while loop, you enter a colon. Everything that should be repeated is tabbed over. Once the loop ends, anything you want Python to do afterwards is not tabbed over.\n\nHere's a simple example of a while loop:\n\n```\nx = 0\nwhile x < 4:\n    x = x + 1\n```\n\nThis code says \"as long as $x$ is less than $4$, replace $x$ with $x+1$\". What do you think this code will do if you ask it to print out the number $x$ at each stage of the loop? Write your guess below. Then run the code in the next box to see what it does. Did you guess right?","pos":4,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"17b4c8","input":"OK, last step! If your code worked above, let's make a *function* out of it so we don't need to write all of the code out every time we want to compute a gcd. Do you remember how functions work? The first line looks like `def name_of_function(input1, input2):`. Everything under the first line that's part of the function gets tabbed over.\n\nIn the code block below, define a function called $\\gcd$ which takes as inputs two whole numbers $a$ and $b$ where $a<b$ and spits out $\\gcd(a,b)$. (Hint: after writing the line which `def`s your function, just copy/paste your code from earlier below that line. You'll have to remove the line where you defined $a=2,b=3$ since we're allowing users to input any two numbers. Make sure you tab everything under the `def` line over once, and you'll need another tab underneath the `while` line!\n\n**[50 points for this code]**","pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"314675","input":"Looks great! Now, let's test your code by asking it to find an easy gcd. Copy-paste your code from above below, and in the lines above your while loop, write `a = 2,\nb = 3`. Then click the run button above (the one that looks like a play button). Does your code spit out $\\gcd(2,3)=1$? If not, go back to your code and see if you can find an error. If you're having trouble finding any errors, come by my office or send me a message. I'm able to view your code and help put you on the right track. I also highly encourage working together on this (and all) assignment(s)!","pos":11,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"35654f","input":"Now, let's write code for each step in the Euclidean Algorithm. For now, let's assume that $b\\neq 0$ and that $a<b$.\n\nIn the first step of the Euclidean Algorithm, we replace $b$ with $b\\mod a$. In Python, \"replace $x$ with $y$\" is written `x = y`.\n\nBelow, write the code to replace $b$ with $b \\mod a$.","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"638be4","input":"The goal of this Python module is to give you a greater understanding of the Euclidean Algorithm by designing a function to compute the greatest common divisor (gcd) of two whole numbers $a$ and $b$.\n\nRecall the steps in the Euclidean Algorithm when computing gcd(a,b):\n1. Reduce the larger of a and b modulo the smaller.\n2. Repeat this process until one of your numbers becomes 0.\n3. At this point, the gcd is the other (nonzero) number.\n\nIn Python, the code for \"reduce a modulo b\" is `a % b`. For example, to reduce $43 \\mod 26$, you'd write `43 % 26`. (Here, when you see the \"percent\" symbol, think of division and finding a remainder.)\n\nBelow, write and run the code to reduce each of the following:\n1. $263 \\mod 123$\n2. $548 \\mod 32$\n3. $91042 \\mod 8321$","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"6b51b6","input":"And for your last question on this assignment, test your brand-new gcd function on a few pairs of numbers! In the code block below, tell your function to compute the following:\n1. $\\gcd(213,543)$\n2. $\\gcd(32132,54254)$\n3. $\\gcd(12341324,543513543)$\n\nRemember that, in order to use a function you've written, you have to write the name of the function, open parentheses, inputs to the function separated by commas, and close parentheses. For example, to run a function called `zookeeper` on the inputs `monkey, lion, tiger`, you'd write\n\n```\nzookeeper(monkey, lion, tiger)\n```","pos":17,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"727a3a","input":"In our case, we want to run code as long as $b \\neq 0$. In Python, \"not equal to\" is written `!=`. So, for example, to say \"$x$ is not equal to $5$\", you'd write `x != 5`.\n\nBelow, write the first line of a while loop that will run as long as $b \\neq 0$. Remember to put a colon after the first line, and don't run your code yet! Underneath your first line, tabbed over, write the code to replace $b$ with $b \\mod a$. This code corresponds to steps 1 and 2 of our algorithm.","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"7ec1dd","input":"We're almost done! After completing steps 1 and 2, we want to continually replace the larger number with its remainder upon division by the smaller number. Let's look at an example to see what we want.\n\nIf $a=2,b=3$, the algorithm goes as follows:\n1. Check that $b \\neq 0$. (It doesn't since $b=3$ and $3\\neq0$.)\n2. If $b \\neq 0$, replace $b$ with $b \\mod a$. In this case, $b \\mod a$ is $3 \\mod 2 \\equiv 1$. Now our numbers are $a = 2, b = 1$.\n3. We want to reduce the bigger number mod the smaller number. So we first flip the roles of $a$ and $b$, then reduce $b \\mod a$ again.\n4. Repeat this process until \n\nthe last step is to have the code spit out the nonzero number. Since our loop runs *until* $b = 0$, at the end of our loop, $b = 0$. So $a$ is the nonzero number we want.\n\nRemember that the Pythonic expression for \"spit something out\" is `return something`. Below, copy-paste your code from above, but this time, add code below your while loop to spit out the number $a$, which will be our gcd.","pos":9,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d77fb2","input":"**any guess is fine here**","pos":5,"state":"done","type":"cell"}
{"last_load":1569612090950,"type":"file"}